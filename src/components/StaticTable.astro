---

export interface Props{
    tableData: {
        data: Array<any>,
        schema: {
            fields: Array<{name:string, type:string}>
        }
    },
    tableId: string,
    hideIndex?: boolean,
    innerTitles?: Array<number>|null,
    roundNumeric?: number|null
}
let {tableData:{schema:{fields}, data}} = Astro.props;
const {tableId, hideIndex= true, innerTitles=null, roundNumeric=null} = Astro.props;

// wrangling data to render

if(hideIndex){
    fields = fields.slice(1);
    data = data.map(o=>{
        let {index, ...rest} = o;
        return rest
    })
}

const rouondAllNumercCol = (precision)=>{
    data.map(row=>{
        for(let col in row){
            if(fields.filter(f=>f.name===col)[0].type==="number") {
                row[col] = Math.round(row[col]).toFixed(precision);
            }
        }
    })
}
if(roundNumeric){
    rouondAllNumercCol(roundNumeric);
}

const stripedTable = (index: number) => `${index%2===0?"bg-gray-50":"bg-gray-100"} hover:bg-gray-200`;
const innerTitlesLogic = (index: number) => {
    if(hideIndex && index ===0) return true;
    if(!hideIndex && (index===1)) return true;
    return false;
}

---




<table id= {tableId} class="mt-2" >
    <thead>
        <tr class="text-center border-b-2 border-black ">
            {
            fields.map((field, i) => (
                <th>{field.name}</th>
            ))}
        </tr>
    </thead>
    <tbody>
        {data.map((row,i) => (
            <tr class:list={stripedTable(i)}>
                {Object.values(row).map((cell, colNumber) => (
                    <>
                    {innerTitles && innerTitles.includes(i)?
                    innerTitlesLogic(colNumber)?<th colspan={`${Object.values(row).length}`}>{cell}</th>:null
                    :
                    <td>{cell}</td>}
                    </>
                ))}
            </tr>
        ))}
    </tbody>
</table>


